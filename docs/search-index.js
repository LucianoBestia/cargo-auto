var searchIndex = JSON.parse('{\
"cargo_auto":{"doc":"cargo-auto","t":[3,3,3,3,3,3,3,3,3,12,12,12,12,12,12,12,12,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5],"n":["GREEN","PATH_AUTOMATION_TASKS_RS","PATH_CARGO_TOML","PATH_GITIGNORE","PATH_SRC_MAIN_RS","PATH_TARGET_DEBUG_AUTOMATION_TASKS_RS","RED","RESET","YELLOW","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","already_exists_automation_tasks_rs","auto_new","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_automation_tasks_rs_if_needed","build_project_automation_tasks_rs","completion","copy_template","deref","deref","deref","deref","deref","deref","deref","deref","deref","from","from","from","from","from","from","from","from","from","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","is_not_run_in_rust_project_root_directory","main","match_first_argument","print_help_from_cargo_auto","template_basic_mod","template_with_lib_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","cargo_toml","gitignore","src_main_rs","cargo_toml","gitignore","src_main_rs"],"q":["cargo_auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cargo_auto::template_basic_mod","","","cargo_auto::template_with_lib_mod","",""],"d":["ansi code for color","constant paths for read/write","constant paths for read/write","constant paths for read/write","constant paths for read/write","constant paths for read/write","ansi code for color","ansi code for reset color","ansi code for color","","","","","","","","","","already exists automation_tasks_rs directory","copies the template to the <code>automation_tasks_rs</code> directory …","","","","","","","","","","","","","","","","","","","build if the date of Cargo.toml or main.rs is newer then …","build automation_tasks_rs","sub-command for bash auto-completion of <code>cargo auto</code> using …","creates directory if needed and copy files from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","check if is not run in rust project root directory","","the first argument is the task: new, build, release,… …","if there is no argument then print help if there exists …","this strings are copied from the template_x folders …","this strings are copied from the template_x folders …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0,0,0,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[["args",3],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["args",3],["str",15]]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]]],"p":[[3,"GREEN"],[3,"YELLOW"],[3,"RED"],[3,"RESET"],[3,"PATH_AUTOMATION_TASKS_RS"],[3,"PATH_CARGO_TOML"],[3,"PATH_GITIGNORE"],[3,"PATH_SRC_MAIN_RS"],[3,"PATH_TARGET_DEBUG_AUTOMATION_TASKS_RS"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};