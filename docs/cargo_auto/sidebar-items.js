initSidebarItems({"constant":[["SCRIPTS_RSSC",""]],"fn":[["already_exists_scripts_rssc","already exists automation_tasks_rs"],["build_scripts_rssc","build automation_tasks_rs"],["build_scripts_rssc_if_needed","build if the date of Cargo.toml or main.rs is newer then of automation_tasks_rs/target/automation_tasks_rs"],["copy_template","copy files Cargo.toml and main.rs and creates directory if needed"],["is_not_run_in_rust_project_root_directory","check if run in rust project root directory error and exit if not"],["main",""],["match_first_argument","the first argument is the task: new, build, release,â€¦ the task `new` is processed by `cargo-rssc`, all other tasks are processed by the used defined `automation_tasks_rs` in development use: `cargo run -- new` in development use: `cargo run -- build` in development use: `cargo run -- release`"],["print_help_when_no_argument","if there is no argument then print help if there exists `automation_tasks_rs/Cargo.toml` and `automation_tasks_rs/src/main.rs` call automation_tasks_rs with no arguments to print the help prepared in user defined automation_tasks_rs else print the help for `cargo rssc new` in development use: `cargo run` in runtime use: `cargo rssc`"],["rssc_new","copies the template to the automation_tasks_rs directory the second argument is the template name without template_name copies the template_basic in development use: `cargo run -- new` in runtime use: `cargo rssc new` with the argument `with_lib` copies template_with_lib in development use: `cargo run -- new with_lib` in runtime use: `cargo rssc new with_lib`"]],"struct":[["GREEN",""],["RED",""],["RESET",""],["YELLOW",""]]});